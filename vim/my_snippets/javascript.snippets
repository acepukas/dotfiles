snippet ifelse "else if statement" b
if(${1:condition1}) {
  ${2}
} else if(${3:condition2}) {
  ${4}
}
endsnippet

snippet switch "switch block" b
switch(${1:variable}) {
case ${2:condition}:
  ${3:/*code*/}
  break;
default:
  ${4:/*default code*/}
}
endsnippet

snippet hidenew "ensure object constructors are instantiated" b
if(!(this instanceof ${1:CLASSNAME})) {
  return new $1(${2:ARGUMENTS});
}${0}
endsnippet

snippet req "commonJS style require" b
${1:const }${2:mod_name} = require('${3:$2}')${4:;}
endsnippet

snippet class "es6 style class" b
${1:export default }class ${2:CLASSNAME} ${3:extends ${4:PARENT_CLASS}} {

  constructor(${5:params}) {
    ${6:super($5);}
    ${0}
  }

}
endsnippet

snippet getset "create getter and setter together" b
get ${1:PROPERTY}() {
  return this.$1;
}

set $1($1) {
  this.$1 = $1;
}${0}
endsnippet

# for in loop
snippet forin "for in loop" b
for(const ${1:prop} in ${2:object}) {
  if({}.hasOwnProperty.call($2, $1)) {
    $1 = $2[$1];
    ${3:// do something with $1}${0}
  }
}
endsnippet

snippet forof "for of loop" b
for(const ${1:element} of ${2:iterable}) {
  ${3:// do something with $1}${0}
}
endsnippet

snippet keys "Iterate over object keys/props" b
for(const ${1:key} of Object.key(${2:object})) {
  ${0}
}
endsnippet

snippet for "for loop" b
for(let ${1:i} = 0, l = ${2:arr}.length, ${3:el}; $1 < l; $1++) {
  $3 = $2[$1];
  ${4:// do something with $3}${0}
}
endsnippet

# for (...) {...} (Improved Native For-Loop)
snippet forr "reverse for loop" b
for(let ${1:i} = ${2:arr}.length-1, ${3:el}; $1 >= 0; $1--) {
  $3 = $2[$1];
  ${4:// do something with $3}${0}
}
endsnippet

snippet timeout "timeout on multi line" b
setTimeout(function() {
  ${0}
}, ${2:10});
endsnippet

snippet jsdocTag "jsdoc tag"
@${1:tag} ${3:\{${2:type}\} }${4:name} ${5:description}
endsnippet

snippet undef "Short Cut for JS undefined test" b
if(typeof ${1:VAR_NAME} !== 'undefined') {
  $0
}
endsnippet

snippet whileReverse "Iterate over list in reverse" b
let i = ${1:LIST}.length, ${2:LIST_ITEM};
while(i > 0) {
  $2 = $1[--i];
  $0
}
endsnippet

snippet cl "Log with optional string template" b
console.log(${1:\`${2:value}\`});
endsnippet

snippet err "Node.js style error handler" b
if(err) return next(err);
endsnippet
