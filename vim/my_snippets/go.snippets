snippet errchain "Chain an error message" b
if err != nil {
	return fmt.Errorf("${1:ERROR MESSAGE}: %v", err)
}${0}
endsnippet

snippet ford "double index, opposite directions" b
for ${1:i}, ${2:j} := 0, ${4:len(${3:list})-1}; $2 >= 0; $1, $2 = $1+1, $2-1 {
	${0}
}
endsnippet

snippet for-- "Decrementing for loop" b
for ${1:i} := ${3:len(${2:list})-1}; $1 >= 0; $1-- {
	${0}
}
endsnippet

snippet handler "server handler function" b
func (${1:varName} ${2:recevier}) ${3:funcName}() http.HandlerFunc {
	return func(w http.ResponseWriter, r *http.Request) {
		${0}
	}
}
endsnippet

snippet resp "respond with payload" b
respond(w, withPayload(${1:res}))
endsnippet

snippet resstp "respond with payload" b
respond(w, withStatus(http.${1:StatusOK}), withPayload(${2:res}))
endsnippet

snippet reserr "respond with error" b
if ${1:err} != nil {
	respond(w, s.withErr($1))
	return
}
endsnippet

snippet ressterr "respond with status and error" b
respond(w, withStatus(http.${1:StatusBadRequest}), s.withErr(${2:err}))
endsnippet
